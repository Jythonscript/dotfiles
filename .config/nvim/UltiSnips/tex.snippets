# Document
snippet beg "Begin" bA
\\begin{$1}
	$2
\\end{$1}
$0
endsnippet

snippet s "Section" b
\\section{$1}
$0
endsnippet

snippet sn "Section*" b
\\section*{$1}
$0
endsnippet

snippet ss "Subsection" b
\\subsection{$1}
$0
endsnippet

snippet ssn "Subsection*" b
\\subsection*{$1}
$0
endsnippet

snippet sss "Subsubsection" b
\\subsubsection{$1}
$0
endsnippet

snippet sssn "Subsubsection*" b
\\subsubsection*{$1}
$0
endsnippet

snippet bsk "Bigskip" bA
\\bigskip
$0
endsnippet

# Text
snippet bf "Boldface" w
\\textbf{${1:${VISUAL}}}$0
endsnippet

snippet it "Italicize" w
\\textit{${1:${VISUAL}}}$0
endsnippet

snippet ul "Underline" w
\\underline{${1:${VISUAL}}}$0
endsnippet

snippet ttt "text-teletype"
\\texttt{${1:${VISUAL}}}$0
endsnippet

snippet mint "minted" w
\\begin{minted}{$1}
$2
\\end{minted}
$0
endsnippet

snippet np "Newpage"
\\newpage
endsnippet

snippet %% "Comment block" b
\\iffalse
$1
\\fi
$0
endsnippet

snippet qty "SI Quantity" w
\\qty{${1:${VISUAL}}}{$2}$0
endsnippet
# Math

## Context
global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and y != '0'

endglobal

## Tags
snippet dm "Math" bA
\\[
	$1
\\] $0
endsnippet

snippet adm "Align Math" bA
\\begin{align*}
	$1
\\end{align*}
$0
endsnippet

snippet fladm "Force left align math" bA
\\begin{flalign*}
	& $1 &&\\\\$2
\\end{flalign*}
$0
endsnippet

snippet im "Math" w
\$$1\$$0
endsnippet

snippet mk "Math" wA
\$$1\$$0
endsnippet

priority 100
context "math()"
snippet tx "Text" iA
\\text{${1:${VISUAL}}}$0
endsnippet

priority 200
context "math()"
snippet itx "Intertext" iA
\\intertext{
	${1:${VISUAL}}
} $0
endsnippet

snippet item "item" bA
\\item $0
endsnippet

snippet bullet "bullet points" b
\\begin{itemize}
	\\item $1
\\end{itemize}
$0
endsnippet

snippet itm "item" bA
\\item $0
endsnippet

snippet nums "enumerate" b
\\begin{enumerate}
	\\item $1
\\end{enumerate}
$0
endsnippet

context "math()"
snippet cases "cases" b
\\begin{cases}
	$1
\\end{cases}$0
endsnippet

snippet mult "multicolumn" bA
\\begin{multicols}{${1:2}}
	\noindent
	$0
\\end{multicols}
endsnippet

## Operations and Equations
priority 100
context "math()"
snippet == "Align Equals" iA
&=$0
endsnippet

priority 101
context "math()"
snippet &== "triple equals" iA
\\equiv $0
endsnippet

context "math()"
snippet ona "Operator name" iA
\\operatorname{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet ~ "Tilde" i
\\sim $0
endsnippet

context "math()"
snippet tl "Tilde" i
\\tilde
endsnippet

context "math()"
snippet | "Given" w
\\mid $0
endsnippet

context "math()"
snippet Rn "Real number" iA
\\mathbb{R} ^{$1} $0
endsnippet

context "math()"
snippet ^^ "Exponent" iA
^{$1}$0
endsnippet

context "math()"
snippet td "Exponent" iA
^{$1}$0
endsnippet

context "math()"
snippet alp "Alpha" iA
\\alpha$0
endsnippet

context "math()"
snippet bet "Beta" iA
\\beta$0
endsnippet

context "math()"
snippet lam "Lambda" iA
\\lambda$0
endsnippet

context "math()"
snippet sb "Subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet __ "Subscript" iA
_{$1}$0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\\int_{${1:-\infty}}^{${2:\infty}} ${0:${VISUAL}}
endsnippet

context "math()"
snippet sum "sum" wA
\\sum_{${1:n=1}}^{${2:\infty}} $0
endsnippet

priority 300
context "math()"
snippet iint "double integral" iA
\\iint $0
endsnippet

priority 400
context "math()"
snippet iiint "triple integral" iA
\\iiint $0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|sec|tan|arccot|cot|csc|ln|log|exp|star|perp|Delta|delta|phi|Phi|rho)' "ln" rwA
\\`!p snip.rv = match.group(1) + " "`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int|oint)' "Functions" rwA
\\`!p snip.rv = match.group(1) + " "`
endsnippet

context "math()"
snippet mod "modulus" wA
\\bmod $0
endsnippet

context "math()"
snippet binom "binomial coefficient" w
\\binom{$1}{$2} $0
endsnippet

context "math()"
snippet lt "Logical not" wA
\\lnot $0
endsnippet

context "math()"
snippet lr "Logical or" wA
\\lor $0
endsnippet

context "math()"
snippet sqrt "Square root" iA
\\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet ss "Subscript" iA
_
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

priority 100
context "math()"
snippet "([^\\])ps" "Plus" irA
`!p snip.rv = match.group(1) + "+ "`
endsnippet

context "math()"
snippet ms "Minus" iA
- $0
endsnippet

context "math()"
snippet sd "Squared" iA
^2
endsnippet

context "math()"
snippet cb "Cubed" iA
^3
endsnippet

context "math()"
snippet ** "Dot product" iA
\\cdot $0
endsnippet

context "math()"
snippet xx "Cross product" iA
\\times $0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet "<(.*)>" "Inline vector" wr
`!p
snip.rv = f"\\langle {match.group(1)} \\rangle "
`
endsnippet

context "math()"
priority 100
snippet "\[(.*)\]]" "Vector" wr
`!p
l = match.group(1).split(",")
snip.rv = "\\begin{bmatrix*}"
snip >> 1
for s in l:
    snip += s + "\\\\"
snip << 1
snip += "\\end{bmatrix*}"
`
endsnippet

context "math()"
priority 90
snippet "\[(.*)\]" "Matrix" wr
`!p
rows = match.group(1).split(",,") #row separator
snip.rv = "\\begin{bmatrix*}"
snip >> 1
for r in rows:
	col = r.split(",") #column separator
	line = ""
	for i, c in enumerate(col):
		line += c + " "
		if i != (len(col) - 1):
			 line += "& "
	snip += line + "\\\\"
snip << 1
snip += "\\end{bmatrix*}"
`
endsnippet

context "math()"
snippet fr "f from Rn to Rm" w
${1:f}: \\mathbb{R}^{${2:n}} \rightarrow \mathbb{R}^{${3:m}} $0
endsnippet

context "math()"
snippet -> "rightarrow" iA
\\rightarrow $0
endsnippet

context "math()"
snippet => "proof implication" iA
\\Rightarrow $0
endsnippet

context "math()"
snippet mbb "Math blackboard" iA
\\mathbb{$1}$0
endsnippet

context "math()"
snippet cal "mathcal" iA
\\mathcal{$1}$0
endsnippet

context "math()"
snippet xor "xor" i
\\oplus $0
endsnippet

context "math()"
snippet seq "Subset equal" wA
\\subseteq $0
endsnippet

context "math()"
snippet in "in" w
\\in $0
endsnippet

context "math()"
snippet lim "Limit" w
\\lim_{${1:n \\rightarrow \infty}} $0
endsnippet

## Postfix and prefix
context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "bar" "bar" riA
\\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

## Special characters
context "math()"
priority 101
snippet '(?<!\\)(pi|mu|theta|Omega|omega|alpha|lambda|beta|Theta)' "Special characters" rwA
\\`!p snip.rv = match.group(1) + " "`
endsnippet

priority 101
context "math()"
snippet '(?<!\\)(eps)' "epsilon" riA
\\varepsilon $0
endsnippet

context "math()"
snippet \varepsilon "epsilon" i
\\epsilon
endsnippet

context "math()"
snippet '(?<!\\)(Eps)' "Epsilon" riA
\\mathcal{E} $0
endsnippet

context "math()"
snippet '(?<!\\)(part)' "Partial derivative" riA
\\partial $0
endsnippet

context "math()"
snippet '\(' "Big parentheses" ri
\\left( $1 \\right) $0
endsnippet

context "math()"
snippet '\[' "Big square brackets" ri
\\left[ $1 \\right] $0
endsnippet

context "math()"
snippet '\\{' "Big curly braces" ri
\\left\\{ $1 \\right\\} $0
endsnippet

snippet box "Box" i
\\boxed{${VISUAL}}$0
endsnippet

context "math()"
snippet inf "Infinity" i
\\infty
endsnippet

context "math()"
snippet oc "Proportional to" i
\\propto
endsnippet

context "math()"
snippet ~= "Approximate" iA
\\approx $0
endsnippet

context "math()"
snippet ~~ "Proportional to" iA
\\sim
endsnippet

context "math()"
snippet cd "cdots" iA
\\cdots $0
endsnippet

context "math()"
snippet ld "ldots" iA
\\ldots $0
endsnippet

context "math()"
snippet vd "vdots" iA
\\vdots $0
endsnippet

context "math()"
snippet dd "ddots" iA
\\ddots $0
endsnippet

context "math()"
snippet obr "overbrace" wA
\\overbrace{${1:${VISUAL}}}^{\\text{$2}} $0
endsnippet

context "math()"
snippet bf "math boldface" wA
\\boldsymbol{$1}$0
endsnippet

## Graphics
snippet table "Table" w
\\begin{table}[H]
	\\centering
	% \\caption{}
	\\begin{tabular}{$1}
		$2
	\\end{tabular}
\\end{table}
$0
endsnippet

snippet tikz "Tikz" w
\\begin{figure}[H]
	\\centering
	\\begin{tikzpicture}
		$0
	\\end{tikzpicture}
\\end{figure}
endsnippet

snippet figure "Figure" w
\\begin{figure}[H]
	\\centering
	\\includegraphics{$1}
	\\caption{$2}
	\\label{$3}
\\end{figure}
$0
endsnippet

snippet sym "sympy setup" bA
sympy ${1:${VISUAL}} sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
\\[
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
\\]
endsnippet

priority 20000
context "math()"
snippet 'sympy(.*)sympy' "evaluate latex in sympy" wr
`!p
from sympy import *
from sympy.parsing.latex import parse_latex
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
expr = eval('parse_latex(r"' + match.group(1) + '")')
replacements = [(Symbol('pi'),pi),(Symbol('e'),exp(1)),(Symbol('i'),'I')]
snip.rv = latex(expr.subs(replacements).doit())
`
endsnippet
